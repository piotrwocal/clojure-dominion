<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1517662900408">{:repl-history {:ide [], :local [&quot;(= (find-moves [ \\A \\A \\_ \\_ \\_ \\O], 2) nil)&quot; &quot;(= (find-moves [ \\A \\A \\_ \\_ \\_ \\O], 2) \n\t \t\t\t\t\t\t [ \\_ \\A \\A \\_ \\_ \\O])&quot; &quot;(range 6)&quot; &quot;(get init-board 6)&quot; &quot;(def first-line (take 6 init-board))&quot; &quot;(print first-line)&quot; &quot;(= (find-moves [ \\A \\A \\_ \\_ \\_ \\O], 2)\n\t \t\t\t\t\t\t [ \\_ \\A \\A \\_ \\_ \\O])&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t[let current (get idx (result :board))])\n\t\t\t\t{:board first-line} (range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t([let current (get idx (result :board))])\n\t\t\t\t{:board first-line} (range 6)))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get idx (:board result))]\n\t\t\t\t\t\t(update-in result [:result] current)))\n\t\t\t\t{:board first-line :result []}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get idx (:board result))]\n\t\t\t\t\t\t(update-in result [:result] (partial cons current))))\n\t\t\t\t{:board first-line :result []}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get idx (:board result))]\n\t\t\t\t\t\t(associ-in result [:result] current)))\n\t\t\t\t{:board first-line :result []}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get idx (:board result))]\n\t\t\t\t\t\t(assoc-in result [:result] current)))\n\t\t\t\t{:board first-line :result []}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get idx (:board result))]\n\t\t\t\t\t\t(assoc-in result [:result] current)))\n\t\t\t\t{:board first-line :result []}\n\t\t\t\t(range 5))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get idx (:board result))\n\t\t\t\t\t\t\t\t_ (print result idx)]\n\t\t\t\t\t\t(assoc-in result [:result] current)))\n\t\t\t\t{:board first-line :result []}\n\t\t\t\t(range 5))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get idx (:board result))\n\t\t\t\t\t\t\t\t_ (println result idx)]\n\t\t\t\t\t\t(assoc-in result [:result] current)))\n\t\t\t\t{:board first-line :result []}\n\t\t\t\t(range 5))&quot; &quot;(get 3 (:board {:board first-line}))&quot; &quot;(:board {:board first-line})&quot; &quot;(vec (:board {:board first-line}))&quot; &quot;(get 3 (vec (:board {:board first-line})))&quot; &quot;(get (vec (:board {:board first-line})) 3)&quot; &quot;(get (:board {:board first-line}) 3)&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get idx (:board result))\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(assoc-in result [:result] current)))\n\t\t\t\t{:board first-line :result []}\n\t\t\t\t(range 5))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(assoc-in result [:result] current)))\n\t\t\t\t{:board first-line :result []}\n\t\t\t\t(range 5))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(assoc-in result [:result] current)))\n\t\t\t\t{:board first-line :result []}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(assoc-in result [:previous] current)\n\t\t\t\t\t\t(assoc-in result [:result] current)))\n\t\t\t\t{:board first-line :result []}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(assoc-in result [:previous] current)\n\t\t\t\t\t\t(assoc-in result [:result] current)))\n\t\t\t\t{:board first-line :result [] :previous nil}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(-&gt; result\n\t\t\t\t\t\t\t\t(assoc-in [:previous] current)\n\t\t\t\t\t\t\t  (assoc-in [:result] current))))\n\t\t\t\t{:board first-line :result [] :previous nil}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(as-&gt; result val\n\t\t\t\t\t\t\t\t\t(if (even? idx) (assoc-in val [:previous] current))\n\t\t\t\t\t\t\t  \t(assoc-in val [:result] current))))\n\t\t\t\t{:board first-line :result [] :previous nil}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(as-&gt; result val\n\t\t\t\t\t\t\t\t\t(if (even? idx) (assoc-in val [:previous] current) val)\n\t\t\t\t\t\t\t  \t(assoc-in val [:result] current))))\n\t\t\t\t{:board first-line :result [] :previous nil}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(as-&gt; result val\n\t\t\t\t\t\t\t\t\t(if (even? idx) (assoc-in val [:previous] \\x) \\y)\n\t\t\t\t\t\t\t  \t(assoc-in val [:result] current))))\n\t\t\t\t{:board first-line :result [] :previous nil}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(as-&gt; result val\n\t\t\t\t\t\t\t\t\t(if (even? idx) (assoc-in val [:previous] \\x) val)\n\t\t\t\t\t\t\t  \t(assoc-in val [:result] current))))\n\t\t\t\t{:board first-line :result [] :previous nil}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(as-&gt; result val\n\t\t\t\t\t\t\t\t\t(if (even? idx) (assoc-in val [:previous] idx) val)\n\t\t\t\t\t\t\t  \t(assoc-in val [:result] current))))\n\t\t\t\t{:board first-line :result [] :previous nil}\n\t\t\t\t(range 6))&quot; &quot;(def first-line (vec (take 6 init-board)))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(as-&gt; result val\n\t\t\t\t\t\t\t\t\t(if (= (:last board) current) (update-in val [:last] idx))\n\t\t\t\t\t\t\t  \t(assoc-in val [:result] current))))\n\t\t\t\t{:board first-line :result [] :last nil}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(as-&gt; result val\n\t\t\t\t\t\t\t\t\t(if (= (:last result) current) (update-in val [:last] idx))\n\t\t\t\t\t\t\t  \t(assoc-in val [:result] current))))\n\t\t\t\t{:board first-line :result [] :last nil}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(as-&gt; result val\n\t\t\t\t\t\t\t\t\t(update-in val [:last] idx)\n\t\t\t\t\t\t\t  \t(assoc-in val [:result] current))))\n\t\t\t\t{:board first-line :result [] :last nil}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(as-&gt; result val\n\t\t\t\t\t\t\t\t\t(assoc-in val [:last] idx)\n\t\t\t\t\t\t\t  \t(assoc-in val [:result] current))))\n\t\t\t\t{:board first-line :result [] :last nil}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(as-&gt; result val\n\t\t\t\t\t\t\t\t\t(if (even? idx) (assoc-in val [:last] idx))\n\t\t\t\t\t\t\t  \t(assoc-in val [:result] current))))\n\t\t\t\t{:board first-line :result [] :last nil}\n\t\t\t\t(range 6))&quot; &quot;(reduce (fn [result idx]\n\t\t\t\t\t(let [current (get (:board result) idx)\n\t\t\t\t\t\t\t\t_ (println result idx current)]\n\t\t\t\t\t\t(as-&gt; result val\n\t\t\t\t\t\t\t\t\t(if (even? idx) (assoc-in val [:last] idx) val)\n\t\t\t\t\t\t\t  \t(assoc-in val [:result] current))))\n\t\t\t\t{:board first-line :result [] :last nil}\n\t\t\t\t(range 6))&quot; &quot;(let [conn (esr/connect \&quot;http://127.0.0.1:9200\&quot;)])&quot; &quot;(esd/get conn \&quot;myapp\&quot; \&quot;articles\&quot; \&quot;521f246bc6d67300f32d2ed60423dec4740e50f5\&quot; )&quot; &quot;(-&gt;&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t (source))&quot; &quot;(-&gt;&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t (apply source))&quot; &quot;(-&gt;&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t ( :_source ))&quot; &quot;(-&gt;&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t ( :_source :age))&quot; &quot;(-&gt;&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t ( get :_source :age))&quot; &quot;(-&gt;&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t (comp :_source :age))&quot; &quot;(-&gt;&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t ((:_source) :age))&quot; &quot;(-&gt;&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t (-&gt; :_source :age))&quot; &quot;(def test-data {:age 39 :name Piotr})&quot; &quot;(def test-data {:age 39 :name \&quot;Piotr\&quot;})&quot; &quot;(print test-data\n\t\t\t )&quot; &quot;(pprint test-data\n\t\t\t )&quot; &quot;(clojure.pprint test-data)&quot; &quot;(use 'clojure.repl.*\n\t\t \n\t\t )&quot; &quot;(use 'clojure.repl)&quot; &quot;(doc map)&quot; &quot;(doc pprint)&quot; &quot;(use 'clojure.pprint)&quot; &quot;(def test-data {data {:age 39, :name \&quot;Piotr\&quot;}})&quot; &quot;(def test-data {:data {:age 39, :name \&quot;Piotr\&quot;}})&quot; &quot;(pprint test-data)&quot; &quot;((comp :data) test-data)&quot; &quot;(doc comp)&quot; &quot;((comp :name :data) test-data)&quot; &quot;(-&gt;&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t (:_source))&quot; &quot;(-&gt;&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t (comp :age :_source))&quot; &quot;(-&gt;&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t (partial (comp :age :_source)))&quot; &quot;(-&gt;&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;))&quot; &quot;(-&gt;&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t :_source)&quot; &quot;(-&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t(-&gt; :_source))&quot; &quot;(-&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t(-&gt; :_source :age))&quot; &quot;(-&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t:_source :age)&quot; &quot;(-&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t:_source \n\t\t:age)&quot; &quot;(-&gt; (esd/search conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t:_source :age)&quot; &quot;(-&gt; (esd/search conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t:_source \n\t\t:age)&quot; &quot;(def conn (esr/connect \&quot;http://127.0.0.1:9200\&quot;))&quot; &quot;(-&gt; (esd/search conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t:_source)&quot; &quot;(esr/connect \&quot;http://127.0.0.1:9200\&quot;\n             {:connection-manager (clj-http.conn-mgr/make-reusable-conn-manager {:timeout 10})})&quot; &quot;(esd/search conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)&quot; &quot;(esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)&quot; &quot;(esd/search conn \&quot;bank\&quot; \&quot;_all\&quot;\n\t\t\t\t\t\t\t\t:filter {:range {:age {:from 25 :to 30}}})&quot; &quot;(esd/search conn \&quot;bank\&quot; \&quot;_all\&quot;\n\t\t\t\t\t\t:query (q/query-string :biography \&quot;New York OR Austin\&quot;)\n\t\t\t\t\t\t:filter {:range {:age {:from 25 :to 30}}})&quot; &quot;(esd/search conn \&quot;bank\&quot; \&quot;_all\&quot;\n\t\t\t\t\t\t:query (q/prefix {:username \&quot;Oli\&quot;}))&quot; &quot;(esd/search conn \&quot;bank\&quot; \&quot;_all\&quot;\n\t\t\t\t\t\t:query (q/prefix {:username \&quot;Oli\&quot;})\n\t\t\t\t\t\t:size 10)&quot; &quot;(esd/search conn \&quot;bank\&quot; \&quot;_all\&quot;\n\t\t\t\t\t\t{:query (q/prefix {:username \&quot;Oli\&quot;})\n\t\t\t\t\t\t:size 10})&quot; &quot;(esd/search conn \&quot;bank\&quot; \&quot;_all\&quot;\n\t\t\t\t\t\t{:query (q/prefix {:username \&quot;Oli\&quot;})})&quot; &quot;(esd/search conn \&quot;bank\&quot; \&quot;_all\&quot;\n\t\t\t\t\t\t{ :query (q/prefix {:username \&quot;Oli\&quot;})})&quot; &quot;(esd/search conn \&quot;bank\&quot; \&quot;_all\&quot;)&quot; &quot;∏&quot; &quot;(-&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t:_source :firstname)&quot; &quot;(-&gt; (esd/get conn \&quot;bank\&quot; \&quot;_all\&quot; \&quot;1\&quot;)\n\t\t:_source)&quot; &quot;(client/get \&quot;localhost:9200/bank/_search?q=*&amp;sort=account_number:asc&amp;pretty&amp;pretty\&quot;)&quot; &quot;(client/get \&quot;http://localhost:9200/bank/_search?q=*&amp;sort=account_number:asc&amp;pretty&amp;pretty\&quot;)&quot; &quot;(-&gt; (client/get \&quot;http://localhost:9200/bank/_search?q=*&amp;sort=account_number:asc&amp;pretty&amp;pretty\&quot;)\n\t:body)&quot; &quot;(-&gt; (client/get \&quot;http://localhost:9200/bank/_search?q=*&amp;sort=account_number:asc&amp;pretty&amp;pretty\&quot;)\n\t\t:body\n\t\tjson/read-str)&quot; &quot;(-&gt; (client/get \&quot;http://localhost:9200/bank/_search?q=*&amp;sort=account_number:asc&amp;pretty&amp;pretty\&quot;)\n\t\t:body\n\t\tjson/read-str\n\t\t(get \&quot;hits\&quot;))&quot; &quot;(-&gt; (client/get \&quot;http://localhost:9200/bank/_search?q=*&amp;sort=account_number:asc&amp;pretty&amp;pretty\&quot;)\n\t\t:body\n\t\tjson/read-str\n\t\t(get-in  [\&quot;hits\&quot; \&quot;hits\&quot;]))&quot; &quot;(-&gt; (client/get \&quot;http://localhost:9200/bank/_search?q=*&amp;sort=account_number:asc&amp;pretty&amp;pretty\&quot;)\n\t\t:body\n\t\tjson/read-str\n\t\t(get-in  [\&quot;hits\&quot; \&quot;hits\&quot;])\n\t\t)&quot; &quot;(def result \n(-&gt; (client/get \&quot;http://localhost:9200/bank/_search?q=*&amp;sort=account_number:asc&amp;pretty&amp;pretty\&quot;)\n\t\t:body\n\t\tjson/read-str\n\t\t(get-in  [\&quot;hits\&quot; \&quot;hits\&quot;])\n\t\t))&quot;], :remote []}}</component>
</project>