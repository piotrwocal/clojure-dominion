<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1422568039948">{:repl-history {:ide [], :local [&quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     ;(map params-&gt;strategy)\n     ;(subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     (map (partial apply max-key val))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     (map (partial apply max-key val))\n     (map key)\n     frequencies\n     pprint)&quot; &quot;(defn play-series\n  \&quot;Returns result of n games between input strategies as a map\n   'name/number of wins'. In case of tie both strategies wins\&quot;\n  [n &amp; strategies]\n  (-&gt;&gt; #(count-points (apply play strategies))\n       repeatedly\n       (take n)\n       (map (partial apply max-key val))\n       (map key)\n       frequencies))&quot; &quot;(defn play-series\n  \&quot;Returns result of n games between input strategies as a map\n   'name/number of wins'. In case of tie both strategies wins\&quot;\n  [n &amp; strategies]\n  (-&gt;&gt; #(count-points (apply play strategies))\n       repeatedly\n       (take n)))\n&quot; &quot;(play-series 10 \n             [\&quot;1\&quot; optimized-big-money]\n              \&quot;2\&quot; optimized-big-money)&quot; &quot;()&quot; &quot;(play-series 10 \n             [\&quot;1\&quot; province-gold-duchy-silver]\n             [\&quot;2\&quot; province-gold-silver])&quot; &quot;(defn count-series-wins\n  [result]\n  (-&gt;&gt; result\n    (map (partial apply max-key val))\n    (map key)\n    frequencies))&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     count-series-wins \n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     count-series-wins\n     sort-by second\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     ;(take 3)\n     ;results-&gt;params\n     ;(cons [5 7 2 1])\n     ;(map params-&gt;strategy)\n     ;(subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     ;count-series-wins\n     ;(sort-by second &gt;)\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     ;(map params-&gt;strategy)\n     ;(subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     ;count-series-wins\n     ;(sort-by second &gt;)\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     ;count-series-wins\n     ;(sort-by second &gt;)\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     count-series-wins\n     ;(sort-by second &gt;)\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     count-series-wins\n     (sort-by second &gt;)\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     count-series-wins\n     (sort-by second &gt;)\n     first\n     pprint)&quot; &quot;(defn count-series-wins\n  [result]\n  (-&gt;&gt; result\n     (map (partial apply max-key val))\n     (map key)\n     frequencies\n     (sort-by second &gt;)))&quot; &quot;  (-&gt;&gt; (neighbour-results neighbour-series [5 4 3 2])\n       (take 3)\n       results-&gt;params\n       (cons [5 4 3 2])\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first)&quot; &quot;  (-&gt;&gt; (neighbour-results 10 [5 4 3 2])\n       (take 3)\n       results-&gt;params\n       (cons [5 4 3 2])\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series 10))\n       ;count-series-wins\n       first)&quot; &quot;(defn play-series\n  \&quot;Returns result of n games between input strategies as a map\n   'name/number of wins'. In case of tie both strategies wins\&quot;\n  [n &amp; strategies]\n  (-&gt;&gt; #(count-points (apply play strategies))\n       repeatedly\n       (take n)\n       count-series-wins))&quot; &quot;( count-series-wins (play-series 10 \n             [\&quot;1\&quot; province-gold-duchy-silver]\n             [\&quot;2\&quot; province-gold-silver]))&quot; &quot;(defn count-series-wins\n  [result]\n  (-&gt;&gt; result\n     (map (partial apply max-key val))\n     (map key)\n     frequencies))&quot; &quot;  (-&gt;&gt; (neighbour-results 10 [5 4 3 2])\n       (take 3)\n       ;results-&gt;params\n       ;(cons [5 4 3 2])\n       ;(map params-&gt;strategy)\n       ;(subsets 2)\n       ;(map (partial apply play-balanced-series 10))\n       ;count-series-wins\n       first)&quot; &quot;  (-&gt;&gt; (neighbour-results 10 [5 4 3 2])\n       (take 3)\n       results-&gt;params\n       (cons [5 4 3 2])\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series 10))\n       count-series-wins\n       first)&quot; &quot;  (-&gt;&gt; (neighbour-results 10 [5 4 3 2])\n       (take 3)\n       ;results-&gt;params\n       ;(cons [5 4 3 2])\n       ;(map params-&gt;strategy)\n       ;(subsets 2)\n       ;(map (partial apply play-balanced-series 10))\n       ;count-series-wins\n       ;first\n       )&quot; &quot;  (-&gt;&gt; (neighbour-results 10 [5 4 3 2])\n       (take 3)\n       results-&gt;params\n       (cons [5 4 3 2])\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series 10))\n       ;count-series-wins\n       ;first\n       )&quot; &quot;  (-&gt;&gt; (neighbour-results 10 [5 4 3 2])\n       (take 3)\n       results-&gt;params\n       (cons [5 4 3 2])\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series 10))\n       count-series-wins\n       ;first\n       )&quot; &quot;  (-&gt;&gt; (neighbour-results 10 [5 4 3 2])\n       (take 3)\n       results-&gt;params\n       (cons [5 4 3 2])\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series 10))\n       count-series-wins\n       first\n       )&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       results-&gt;params\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       result-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       ;results-&gt;params\n       ))&quot; &quot;(defn results-&gt;params\n  [result]\n  (map (comp vec read-string first) result))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       (map result-&gt;params)\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       ;results-&gt;params\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       map result-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       ;results-&gt;params\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       ;results-&gt;params\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       (comp vec read-string first)\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       ;(comp vec read-string first)\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       first ;(comp vec read-string first)\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       first ;(comp vec read-string first)\n       read-string\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       ;first\n       ;first ;(comp vec read-string first)\n       ;read-string\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       (sort-by val &gt;)\n       (comp read-string key first)\n       ;first\n       ;first ;(comp vec read-string first)\n       ;read-string\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       (sort-by val &gt;)\n       (comp key first)\n       ;first\n       ;first ;(comp vec read-string first)\n       ;read-string\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       (sort-by val &gt;)\n       (partial comp key first)\n       ;first\n       ;first ;(comp vec read-string first)\n       ;read-string\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       (sort-by val &gt;)\n       first\n       first ;(comp vec read-string first)\n       read-string\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       (sort-by val &gt;)\n       ;first\n       ;first ;(comp vec read-string first)\n       ;read-string\n       ))&quot; &quot;(comp first first\n      '([\&quot;[6 5 3 3]\&quot; 2] [\&quot;[5 4 3 2]\&quot; 2] [\&quot;[4 4 4 3]\&quot; 1] [\&quot;[5 5 4 1]\&quot; 1]))&quot; &quot;(comp first \n      '([\&quot;[6 5 3 3]\&quot; 2] [\&quot;[5 4 3 2]\&quot; 2] [\&quot;[4 4 4 3]\&quot; 1] [\&quot;[5 5 4 1]\&quot; 1]))&quot; &quot;((comp first \n      '([\&quot;[6 5 3 3]\&quot; 2] [\&quot;[5 4 3 2]\&quot; 2] [\&quot;[4 4 4 3]\&quot; 1] [\&quot;[5 5 4 1]\&quot; 1])))&quot; &quot;((comp first) \n      '([\&quot;[6 5 3 3]\&quot; 2] [\&quot;[5 4 3 2]\&quot; 2] [\&quot;[4 4 4 3]\&quot; 1] [\&quot;[5 5 4 1]\&quot; 1]))&quot; &quot;((comp first first) \n      '([\&quot;[6 5 3 3]\&quot; 2] [\&quot;[5 4 3 2]\&quot; 2] [\&quot;[4 4 4 3]\&quot; 1] [\&quot;[5 5 4 1]\&quot; 1]))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       (sort-by val &gt;)\n       ((comp read-string first first))\n       ;first\n       ;first ;(comp vec read-string first)\n       ;read-string\n       ))&quot; &quot;((comp read-string first first) \n      '([\&quot;[6 5 3 3]\&quot; 2] [\&quot;[5 4 3 2]\&quot; 2] [\&quot;[4 4 4 3]\&quot; 1] [\&quot;[5 5 4 1]\&quot; 1]))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       (sort-by val &gt;)\n       ((comp read-string key first))\n       ))&quot; &quot;(defn optimize-best-neighbour\n  [games-cnt max-steps params]\n  (-&gt;&gt; params\n       (iterate (partial best-neighbour-params games-cnt))\n       (find-duplicate max-steps)\n       first))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n     (take tournament-players)\n     results-&gt;params\n     (cons params)\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series tournament-series))\n     count-series-wins\n     (sort-by val &gt;)\n     ((comp read-string key first))))&quot; &quot;(optimize-best-neighbour 10 30 [5 4 3 2])&quot; &quot;(optimize-best-neighbour 2 2 [5 4 3 2])&quot; &quot;(defn best-tournament-params\n  [neighbour-plays tournament-plays tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-plays params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-plays))\n       count-series-wins\n       (sort-by val &gt;)\n       ((comp read-string key first))))&quot; &quot;(best-tournament-params 10 10 3 [5 4 3 2])&quot; &quot;(defn optimize-iteratively\n  [max-steps f params]\n  (-&gt;&gt; params\n       (iterate f)\n       (find-duplicate max-steps)\n       first))&quot; &quot;(defn optimize-iteratively\n  [max-steps params f]\n  (-&gt;&gt; params\n       (iterate f)\n       (find-duplicate max-steps)\n       first))&quot; &quot;(optimize-iteratively 10 [5 4 3 2] (partial best-neighbour-params 10))&quot; &quot;(optimize-best-neighbour 10 10 [5 4 3 2])&quot; &quot;(optimize-iteratively 10 [5 4 3 2] \n                      (partial best-neighbour-params 10))&quot; &quot;(optimize-iteratively 5 [5 4 3 2] \n                      (partial best-tournament-params 5))&quot; &quot;(defn optimize-iteratively\n  [max-steps params f]\n  (-&gt;&gt; params\n       (iterate f)\n       (find-duplicate max-steps)\n       ))&quot; &quot;(defn find-duplicate\n  ([max coll]\n    (find-duplicate max coll []))\n  ([max coll elements]\n    (let [x (first coll)]\n      (if (or (contains? elements x)\n              (= (count elements) max))\n        [x elements]\n        (recur max (rest coll) (conj elements x))))))&quot; &quot;(find-duplicate 5 [1 2 3 4 5])&quot; &quot;(find-duplicate 5 [1 2 3 3 5])&quot; &quot;(find-duplicate 3 [1 2 3 3 5])&quot; &quot;(find-duplicate 10 [1 2 3 4 5 2])&quot; &quot;(-&gt;&gt; [5 4 3 2]\n     (iterate (partial best-tournament-params 5 5 3))\n     (take 5))&quot; &quot;(find-duplicate 10  '([5 4 3 2] [5 4 3 2] [5 4 3 2] [4 3 3 3] [4 3 3 3]))&quot; &quot;(contains? [[1]] [1])&quot; &quot;(some #{[1]} [[1]])&quot; &quot;(defn optimize-iteratively\n  [max-steps params f]\n  (-&gt;&gt; params\n       (iterate f)\n       (find-duplicate max-steps)))&quot; &quot;(defn find-duplicate\n  ([max coll]\n    (find-duplicate max coll []))\n  ([max coll elements]\n    (let [x (first coll)]\n      (if (or (some #{x} elements)\n              (= (count elements) max))\n        [x elements]\n        (recur max (rest coll) (conj elements x))))))&quot; &quot;(find-duplicate 10 [[1][2][3][2][4]])&quot; &quot;(optimize-iteratively 5 [5 4 3 2] \n                      (partial best-tournament-params 5 5 3))&quot; &quot;(optimize-iteratively 10 [5 4 3 2]\n                      (partial best-neighbour-params 10))&quot; &quot;(defn find-duplicate\n  ([max coll]\n    (find-duplicate max coll []))\n  ([max coll elements]\n    (let [x (first coll)]\n      (if (or (some #{x} elements)\n              (= (count elements) max))\n        [x (conj elements x)]\n        (recur max (rest coll) (conj elements x))))))&quot; &quot;(optimize-iteratively 10 [6 6 2 2] \n                      (partial best-tournament-params 10 10 3))&quot; &quot;(optimize-iteratively 10 [6 7 2 3] \n                      (partial best-tournament-params 20 20 4))&quot; &quot;(optimize-iteratively 10 [6 6 3 2] \n                      (partial best-tournament-params 40 40 4))&quot; &quot;(optimize-iteratively 10 [5 5 3 4] \n                      (partial best-tournament-params 50 100 4))&quot; &quot;(optimize-iteratively 20 [5 5 3 3] \n                      (partial best-tournament-params 100 200 4))&quot; &quot;(play [\&quot;1\&quot; province-gold-duchy-silver]\n      [\&quot;2\&quot;] province-gold-silver)&quot; &quot;(play [\&quot;1\&quot; province-gold-duchy-silver]\n      [\&quot;2\&quot; province-gold-silver])&quot; &quot;(pprint (play [\&quot;1\&quot; province-gold-duchy-silver]\n      [\&quot;2\&quot; province-gold-silver]))&quot; &quot;(file-persisted-action\n  [file action]\n  (fn [board hand]\n    (let [hand (action board hand)]\n      (println hand)\n       hand )))&quot; &quot;(println {:silver 1})&quot; &quot;(defn file-persisted-action\n  [file action]\n  (fn [board hand]\n    (let [hand (action board hand)]\n      (println hand)\n       hand )))&quot; &quot;(def verbose-pgds\n  (file-persisted-action \&quot;someFileName\&quot; province-gold-duchy-silver))&quot; &quot;(defn file-persisted-action\n  [file move-prefix action]\n  (fn [board hand]\n    (let [hand (action board hand)]\n      (println move-prefix hand)\n       hand )))&quot; &quot;(def verbose-pgds\n  (file-persisted-action \&quot;someFileName\&quot; \&quot;verbose\&quot; province-gold-duchy-silver))&quot; &quot;(pprint (play [\&quot;1\&quot; verbose-pgds]\n      [\&quot;2\&quot; province-gold-silver]))&quot; &quot;(defn file-persisted-action\n  [file-name move-prefix action]\n  (fn [board hand]\n    (let [hand (action board hand)]\n      (when-not (.exists (as-file \&quot;myfile.txt\&quot;))\n        )\n      (spit file-name (str move-prefix hand \&quot;\\n\&quot;))\n       hand )))&quot; &quot;(defn file-persisted-action\n  [file-name move-prefix action]\n  (fn [board hand]\n    (let [hand (action board hand)]\n      (when-not (.exists (as-file \&quot;myfile.txt\&quot;))\n        (spit file-name \&quot;Let's play !\&quot;))\n      (spit file-name (str move-prefix hand \&quot;\\n\&quot;) :append true)\n       hand )))&quot;], :remote []}}</component>
</project>