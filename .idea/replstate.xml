<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1424641784759">{:repl-history {:ide [], :local [&quot;(-&gt;&gt; (str/split \&quot;verbose {:province 1}\&quot; #\&quot;\\{\&quot;)\n     last\n     (str \&quot;{\&quot;)\n     (read-string)\n     first)&quot; &quot;(-&gt;&gt; (str/split \&quot;verbose {:province 1}\&quot; #\&quot;\\{\&quot;)\n     last\n     (str \&quot;{\&quot;)\n     (read-string))\n     &quot; &quot;(key {:province 1})&quot; &quot;(first {:province 1})&quot; &quot;(keys )&quot; &quot;(keys\n  {:province 1})&quot; &quot;(defn line-&gt;buy\n  [line]\n  (-&gt;&gt; (str/split line #\&quot;\\{\&quot;) last (str \&quot;{\&quot;) (read-string)))\n     &quot; &quot;(line-&gt;buy \&quot;vervose {:test 1}\&quot;)&quot; &quot;(defn split-prefx-buy\n  [line]\n  (-&gt;&gt; (str/split line #\&quot;\\{\&quot;) (vec first (last (str \&quot;{\&quot;)))))&quot; &quot;(defn split-prefx-buy\n  [line]\n  (-&gt;&gt; (str/split line #\&quot;\\{\&quot;) ))&quot; &quot;(defn split-prefx-buy\n  [line]\n  (-&gt;&gt; (str/split line #\&quot;\\{\&quot;)))&quot; &quot;(defn split-prefx-buy\n  [line]\n  (let [tokens (str/split line #\&quot;\\{\&quot;)]\n      [(first tokens) (str \&quot;{\&quot; (second tokens))]))&quot; &quot;(defn split-prefx-buy\n  [line]\n  (let [tokens (str/split line #\&quot;\\{\&quot;)]\n      [(.trim (first tokens)) (str \&quot;{\&quot; (second tokens))]))&quot; &quot;(split-prefx-buy \&quot;verbose {:test 1}\&quot;)&quot; &quot;(defn line-&gt;prefix-buy\n  [line]\n  (let [tokens (str/split line #\&quot;\\{\&quot;)]\n    [(.trim (first tokens)) (str \&quot;{\&quot; (second tokens))]))&quot; &quot;(defn line-&gt;prefx-buy\n  [line]\n  (let [tokens (str/split line #\&quot;\\{\&quot;)]\n      [(.trim (first tokens)) (str \&quot;{\&quot; (second tokens))]))&quot; &quot;(defn saving-action\n  [file-name move-prefix action]\n  (fn [board hand]\n    (let [hand (action board hand)\n          out-line (str move-prefix \&quot; \&quot; hand \&quot;\\n\&quot;)]\n      (when-not (.exists (as-file file-name))\n        (spit file-name \&quot;Let's play !\\n\&quot;))\n      (spit file-name out-line :append true)\n      hand)))&quot; &quot;(def verbose-pgds\n  (saving-action \&quot;someFileName\&quot; \&quot;verbose\&quot; province-gold-duchy-silver))\n&quot; &quot;(def verbose-pgds\n  (saving-action \&quot;someFileName\&quot; \&quot;verbose\&quot; province-gold-duchy-silver))\n\n(pprint (play [\&quot;1\&quot; verbose-pgds]\n              [\&quot;2\&quot; province-gold-silver]))&quot; &quot;(line-&gt;prefix-buy \&quot;verbose {:province 1}\&quot;)&quot; &quot;(with-open [rdr (reader \&quot;someFileName\&quot;)]\n  (let [last-line (last (line-seq rdr))\n        [prefix buy] (line-&gt;prefix-buy last-line)]\n    (println prefix \&quot; - \&quot; buy )))\n&quot; &quot;(defn reading-action\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (with-open [rdr (reader file-name)]\n      (let [last-line (last (line-seq rdr))\n            [prefix buy] (line-&gt;prefix-buy last-line)]\n        (if (= move-prefix prefix) \n          buy\n          (do\n            (Thread/sleep interval)\n            (recur file-name move-prefix)))))))&quot; &quot;(defn reading-action\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (with-open [rdr (reader file-name)]\n      (let [last-line (last (line-seq rdr))\n            [prefix buy] (line-&gt;prefix-buy last-line)]\n        (if (= move-prefix prefix) \n          buy\n            (recur file-name move-prefix))))))&quot; &quot;(defn read-prefix-buy\n  [file-name move-prefix]\n  (with-open [rdr (reader file-name)]\n    (let [last line (last (line-seq rdr))]\n      (line-&gt;prefix-buy last-line))))\n&quot; &quot;(defn read-prefix-buy\n  [file-name move-prefix]\n  (with-open [rdr (reader file-name)]\n    (let [last-line (last (line-seq rdr))]\n      (line-&gt;prefix-buy last-line))))\n&quot; &quot;(defn read-prefix-buy\n  [file-name]\n  (with-open [rdr (reader file-name)]\n    (let [last-line (last (line-seq rdr))]\n      (line-&gt;prefix-buy last-line))))\n&quot; &quot;(loop [[prefix buy] (read-prefix-buy \&quot;someFileName\&quot;)]\n  (if (= prefix \&quot;test\&quot;)\n    buy\n    (do\n      (Thread/sleep 1000)\n      (recur (read-prefix-buy)))))&quot; &quot;(loop [[prefix buy] (read-prefix-buy \&quot;someFileName\&quot;)]\n  (if (= prefix \&quot;test\&quot;)\n    buy\n    (do\n      (Thread/sleep 1000)\n      (recur (read-prefix-buy \&quot;someFileName\&quot;)))))&quot; &quot;(take-while (partial not= \&quot;test\&quot;) \n            (repeatedly (fn[] (Thread/sleep 1000) (read-prefix-buy \&quot;someFileName\&quot;))))&quot; &quot;(def read-file (take-while (partial not= \&quot;test\&quot;) \n            (repeatedly (fn[] (Thread/sleep 1000) (read-prefix-buy \&quot;someFileName\&quot;)))))&quot; &quot;(read-file)&quot; &quot;(take 10)&quot; &quot; (some (partial not= \&quot;test\&quot;) \n            (repeatedly (fn[] (Thread/sleep 1000) (read-prefix-buy \&quot;someFileName\&quot;))))&quot; &quot;(take 10 )&quot; &quot;(take 10 (repeatedly (fn [] (Thread/sleep 1000) (read-prefix-buy \&quot;someFileName\&quot;))))&quot; &quot;(defn read-prefix-buy\n  [file-name]\n  (with-open [rdr (reader file-name)]\n    (let [last-line (last (line-seq rdr))]\n      last-line)))&quot; &quot;(defn read-prefix-buy\n  [file-name]\n  (with-open [rdr (reader file-name)]\n    (let [last-line (last (line-seq rdr))]\n      (line-&gt;prefix-buy last-line))))&quot; &quot;(defn line-&gt;prefix-buy\n  [line]\n  (let [tokens (str/split line #\&quot;\\{\&quot;)]\n    [(.trim (first tokens)) (read-string (str \&quot;{\&quot; (second tokens)))]))&quot; &quot;(line-&gt;prefix-buy \&quot;test {:someFileName 1}\&quot;)&quot; &quot;sdfsdfsdf&quot; &quot;sdf&quot; &quot;(line-&gt;prefix-buy \&quot;test {:gold 1}\&quot;)&quot; &quot;(read-prefix-buy \&quot;someFileName\&quot;)&quot; &quot;(take 3 (repeatedly (fn [] (Thread/sleep 1000) (read-prefix-buy \&quot;someFileName\&quot;))))&quot; &quot;(+ 2 2)&quot; &quot;(some (partial not= \&quot;test\&quot;)\n      (repeatedly (fn [] (Thread/sleep 1000) (read-prefix-buy \&quot;someFileName\&quot;))))&quot; &quot;(some (partial not= \&quot;verbose\&quot;)\n      (repeatedly (fn [] (Thread/sleep 1000) (read-prefix-buy \&quot;someFileName\&quot;))))&quot; &quot;(take 3  (repeatedly (fn [] (Thread/sleep 1000) (read-prefix-buy \&quot;someFileName\&quot;))))&quot; &quot;(first (filter (partial not= \&quot;verbose2\&quot;) \n               (repeatedly (fn [] (Thread/sleep 1000) (read-prefix-buy \&quot;someFileName\&quot;)))))&quot; &quot;(first (filter #(not= \&quot;verbose2\&quot; (first %)) \n               (repeatedly (fn [] (Thread/sleep 1000) (read-prefix-buy \&quot;someFileName\&quot;)))))&quot; &quot;(loop [[prefix buy] (read-prefix-buy \&quot;someFileName\&quot;)]\n  (if (= prefix \&quot;verbose2\&quot;)\n    buy\n    (do\n      (Thread/sleep 1000)\n      (recur (read-prefix-buy \&quot;someFileName\&quot;)))))&quot; &quot;(defn read-last-prefix-buy\n  [file-name]\n  (with-open [rdr (reader file-name)]\n    (let [last-line (last (line-seq rdr))]\n      (line-&gt;prefix-buy last-line))))&quot; &quot;(defn saving-action*\n  [file-name move-prefix action]\n  (fn [board hand]\n    (let [hand (action board hand)\n          out-line (str move-prefix \&quot; \&quot; hand \&quot;\\n\&quot;)]\n      (when-not (.exists (as-file file-name))\n        (spit file-name \&quot;Let's play !\\n\&quot;))\n      (spit file-name out-line :append true)\n      hand)))&quot; &quot;(defn reading-action*\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (loop [[prefix buy] (read-prefix-buy file-name)]\n      (if (= prefix move-prefix)\n        buy\n        (do\n          (Thread/sleep interval)\n          (recur (read-prefix-buy file-name)))))))&quot; &quot;(defn reading-action2*\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (-&gt;&gt; (fn [] (Thread/sleep interval) (read-prefix-buy file-name))\n         repeatedly\n         (filter #(not= move-prefix (first %)))\n         first)))\n&quot; &quot;((reading-action* \&quot;someFileName\&quot; \&quot;verbose\&quot; 1000))&quot; &quot;((reading-action* \&quot;someFileName\&quot; \&quot;verbose\&quot; 1000) 1 1)&quot; &quot;((reading-action2* \&quot;someFileName\&quot; \&quot;verbose\&quot; 1000) 1 1)&quot; &quot;((reading-action2* \&quot;someFileName\&quot; \&quot;verbose1\&quot; 1000) 1 1)&quot; &quot;(defn reading-action2*\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (-&gt;&gt; #((Thread/sleep interval) (read-prefix-buy file-name))\n         repeatedly\n         (filter #(= move-prefix (first %)))\n         first)))&quot; &quot;(defn reading-action2*\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (-&gt;&gt; (fn [] (Thread/sleep interval) (read-prefix-buy file-name))\n         repeatedly\n         (filter #(= move-prefix (first %)))\n         first)))&quot; &quot;((reading-action2* \&quot;someFileName\&quot; \&quot;verbose2\&quot; 1000) 1 1)&quot; &quot;(defn reading-action2*\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (-&gt;&gt; (fn [] (Thread/sleep interval) (read-prefix-buy file-name))\n         repeatedly\n         (filter #(= move-prefix (first %)))\n         (partial second first))))&quot; &quot;(defn reading-action2*\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (-&gt;&gt; (fn [] (Thread/sleep interval) (read-prefix-buy file-name))\n         repeatedly\n         (filter #(= move-prefix (first %)))\n         first\n         second)))&quot; &quot;((reading-action2* \&quot;someFileName\&quot; \&quot;verbose3\&quot; 1000) 1 1)&quot; &quot;(def reading-pgds\n  (reading-action* \&quot;someFileName\&quot; \&quot;reading\&quot; 1000))&quot; &quot;(defn reading-action2*\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (-&gt;&gt; (fn [] (Thread/sleep interval)\n           (try\n             (read-prefix-buy file-name)\n             (catch Exception ignore {} )))\n         repeatedly\n         (filter #(= move-prefix (first %)))\n         first\n         second)))&quot; &quot;(defn reading-action2*\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (-&gt;&gt; (fn [] (Thread/sleep interval)\n             (read-prefix-buy file-name))\n         repeatedly\n         (filter #(= move-prefix (first %)))\n         first\n         second)))&quot; &quot;(defn read-last-prefix-buy\n  [file-name]\n  (try\n    (with-open [rdr (reader file-name)]\n      (let [last-line (last (line-seq rdr))]\n        (line-&gt;prefix-buy last-line)))\n    (catch Exception ignore {})))&quot; &quot;(defn reading-action2*\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (-&gt;&gt; (fn [] (Thread/sleep interval)\n           (read-prefix-buy file-name))\n         repeatedly\n         (filter #(= move-prefix (first %)))\n         first\n         second)))&quot; &quot;(defn read-entry\n  [file-name]\n  (try\n    (with-open [rdr (reader file-name)]\n      (let [last-line (last (line-seq rdr))]\n        (line-&gt;prefix-buy last-line)))\n    (catch Exception ignore {})))&quot; &quot;(defn reading-action*\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (loop [[prefix buy] (read-entry file-name)]\n      (if (= prefix move-prefix)\n        buy\n        (do\n          (Thread/sleep interval)\n          (recur (read-entry file-name)))))))&quot; &quot;(defn reading-action2*\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (-&gt;&gt; (fn [] (Thread/sleep interval) \n           (read-entry file-name))\n         repeatedly\n         (filter #(= move-prefix (first %)))\n         first\n         second)))&quot; &quot;(defn reading-action2*\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (-&gt;&gt; (fn [] (Thread/sleep interval) \n           (read-entry file-name))\n         repeatedly\n         (filter #(= move-prefix (first %)))\n         (comp second first))))&quot; &quot;(defn reading-action2*\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (-&gt;&gt; (fn [] (Thread/sleep interval)\n           (read-entry file-name))\n         repeatedly\n         (filter #(= move-prefix (first %)))\n         (partial comp second first))))&quot; &quot;(defn reading-action2*\n  [file-name move-prefix interval]\n  (fn [board hand]\n    (-&gt;&gt; (fn [] (Thread/sleep interval)\n           (read-entry file-name))\n         repeatedly\n         (filter #(= move-prefix (first %)))\n         first\n         second)))&quot; &quot;(defn saving-action*\n  [file-name move-prefix action]\n  (fn [board hand]\n    (let [hand (action board hand)\n          out-line (str move-prefix \&quot; \&quot; hand \&quot;\\n\&quot;)]\n      (when-not (.exists (as-file file-name))\n        (spit file-name \&quot;Let's play !\\n\&quot;))\n      (spit file-name out-line :append true)\n      (println \&quot;Provinces left: \&quot;(:province board))\n      hand)))&quot; &quot;(def saving-pgds\n  (saving-action* \&quot;someFileName\&quot; \&quot;saving\&quot; province-gold-duchy-silver))&quot; &quot;(def reading-pgds\n  (reading-action2* \&quot;someFileName\&quot; \&quot;reading\&quot; 1000))&quot; &quot;send&quot; &quot;(-&gt;&gt; \&quot;reading {:province 3}\&quot;\n     line-&gt;prefix-buy)&quot; &quot;(-&gt;&gt; \&quot;reading {:province 3}\&quot;\n     line-&gt;prefix-buy\n     first)&quot; &quot;(-&gt;&gt; [[\&quot;reading\&quot; {:province 3}] [\&quot;saving\&quot; {:province 4}]]\n     line-&gt;prefix-buy\n     first)&quot; &quot;(pprint (play [\&quot;saving\&quot; saving-pgds]\n              [\&quot;reading\&quot; reading-pgds]))\n&quot; &quot;(doc re-seq)&quot; &quot;(re-find #\&quot;\\[(.*?)\\]\&quot; \&quot;[test][second]\&quot;)&quot; &quot;(re-matches #\&quot;\\[(.*?)\\]\&quot; \&quot;[test][second]\&quot;)&quot; &quot;(re-seq #\&quot;\\[.*?\\]\&quot; \&quot;[test][second]\&quot;)&quot; &quot;(re-seq #\&quot;\\[(.*?)\\]\&quot; \&quot;[test][second]\&quot;)&quot; &quot;(turn init-board init-player)&quot; &quot;(subsets 2 (range 6))&quot; &quot;(pprint \n  (subsets 2 (range 6)))&quot; &quot;(deftrace subsets)&quot; &quot;(trace subsets)&quot; &quot;(trace-vars subsets)&quot; &quot;(pprint \n  (subsets 3 (range 5)))&quot; &quot;(pos? (:free-action init-move-state))&quot; &quot;init-player&quot; &quot;base-cards-stats&quot; &quot;(merge base-cards-stats action-cards-stats)&quot; &quot;(pprint (merge base-cards-stats action-cards-stats))&quot;], :remote []}}</component>
</project>