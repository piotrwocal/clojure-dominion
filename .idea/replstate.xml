<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1422482398369">{:repl-history {:ide [], :local [&quot;(defn first-duplicate \n  ([coll]\n    (first-duplicate coll []))\n  ([coll elements]\n    (let [x (first coll)]\n      (if (contains? elements x)\n        [x elements]\n        (recur (rest coll) (conj elements x))))))&quot; &quot;(pprint (first-duplicate (iterate (partial best-neighbour-params 5) [5 5 2 3])))&quot; &quot;(find-duplicate (iterate (partial best-neighbour-params 5)))&quot; &quot;(find-duplicate (iterate (partial best-neighbour-params 5) [5 5 2 3]))&quot; &quot;(defn find-duplicate\n  ([coll max]\n    (find-duplicate coll [] max))\n  ([coll elements max]\n    (let [x (first coll)]\n      (if (or (contains? elements x)\n              (= (count elements) max))\n        [x elements]\n        (recur (rest coll) (conj elements x) max)))))&quot; &quot;(find-duplicate (iterate (partial best-neighbour-params 5) [5 5 2 1]) 10)&quot; &quot;(pprint (find-duplicate (iterate (partial best-neighbour-params 5) [5 5 2 1]) 10))&quot; &quot;(time (find-duplicate (iterate (partial best-neighbour-params 5) [5 5 2 1]) 10))&quot; &quot;(use 'clojure.repl)&quot; &quot;(doc time)&quot; &quot;(pprint (time (find-duplicate (iterate (partial best-neighbour-params 5) [5 5 2 1]) 10)))&quot; &quot;(pprint (time (find-duplicate (iterate (partial best-neighbour-params 5) [5 5 2 1]) 100)))&quot; &quot;(pprint (time (find-duplicate (iterate (partial best-neighbour-params 2) [5 5 2 1]) 200)))&quot; &quot;(play-balanced-series 10 [5 5 2 1] [0 1 6 4])&quot; &quot;(play-balanced-series 10 \n   [\&quot;[5 5 2 1]\&quot; (paramized-big-money* [5 5 2 1])]\n   [\&quot;[0 1 6 4]\&quot; (paramized-big-money* [0 1 6 4])])&quot; &quot;(play-balanced-series 10 \n   [\&quot;[5 5 2 1]\&quot; (paramized-big-money* 5 5 2 1)]\n   [\&quot;[0 1 6 4]\&quot; (paramized-big-money* 0 1 6 4)])&quot; &quot;(play-balanced-series 10 \n   [\&quot;[5 5 2 1]\&quot; (paramized-big-money* 5 5 2 1)]\n   [\&quot;[0 1 6 4]\&quot; (paramized-big-money* 4 4 3 0)])&quot; &quot;(pprint (time (find-duplicate (iterate (partial best-neighbour-params 50) [5 5 2 1]) 8)))&quot; &quot;(play-balanced-series 10 \n   [\&quot;[5 5 2 1]\&quot; (paramized-big-money* 5 5 2 1)]\n   [\&quot;candidate\&quot; (paramized-big-money* 4 6 3 2)])&quot; &quot;(play-balanced-series 100 \n   [\&quot;[5 5 2 1]\&quot; (paramized-big-money* 5 5 2 1)]\n   [\&quot;candidate\&quot; (paramized-big-money* 4 6 3 2)])&quot; &quot;(play-balanced-series 1000 \n   [\&quot;[5 5 2 1]\&quot; (paramized-big-money* 5 5 2 1)]\n   [\&quot;candidate\&quot; (paramized-big-money* 4 6 3 2)])&quot; &quot;(neighbours [1 2 3 4])&quot; &quot;(permutations (neighbours [1 2 3 4]))&quot; &quot;(count (permutations (neighbours [1 2 3 4])))&quot; &quot;(play-balanced-series 1000 \n   [\&quot;[5 5 2 1]\&quot; (paramized-big-money* 5 5 2 1)]\n   [\&quot;candidate\&quot; (paramized-big-money* 5 6 3 2)])&quot; &quot;(defn find-duplicate\n  ([coll max]\n    (find-duplicate coll [] max))\n  ([coll elements max]\n    (let [x (first coll)]\n      (if (or (contains? elements x)\n              (= (count elements) max))\n        [x elements (count elements)]\n        (recur (rest coll) (conj elements x) max)))))&quot; &quot;(pprint (time (find-duplicate (iterate (partial best-neighbour-params 50) [5 5 2 1]) 50)))&quot; &quot;(defn find-duplicate\n  ([max coll]\n    (find-duplicate max coll []))\n  ([max coll elements]\n    (let [x (first coll)]\n      (if (or (contains? elements x)\n              (= (count elements) max))\n        [x elements (count elements)]\n        (recur max (rest coll) (conj elements x))))))&quot; &quot;(pprint (time \n  (find-duplicate 10 \n    (iterate (partial best-neighbour-params 10) [5 5 2 1]))))&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(pprint (time (find-duplicate (iterate (partial best-neighbour-params 10) [5 5 2 1]) 50)))&quot; &quot;(-&gt;&gt; [5 5 2 1]\n  (partial best-neighbour-params 10)\n  iterate\n  (find-duplicate 10)\n  time\n  pprint)\n&quot; &quot;(-&gt;&gt; [5 5 2 1]\n  (iterate (partial best-neighbour-params 10))\n  (find-duplicate 10)\n  time\n  pprint)\n&quot; &quot;\n(-&gt;&gt; [5 5 2 1]\n  (iterate (partial best-neighbour-params 10))\n  (find-duplicate 10)\n  pprint)\n&quot; &quot;\n(-&gt;&gt; [5 5 2 1]\n  (iterate (partial best-neighbour-params 10))\n  (find-duplicate 10)\n  first)\n&quot; &quot;(defn optimize-best-neighbour\n  [games-cnt max-steps params]\n  (-&gt;&gt; params\n       (iterate (partial best-neighbour-params games-cnt))\n       (find-duplicate max-steps)\n       first))\n&quot; &quot;(optimize-best-neighbour 20 20 [5 7 2 1])&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     ;(subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     ;results-&gt;params\n     ;(map params-&gt;strategy)\n     ;(subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     (cons [5 7 2 1])\n     ;results-&gt;params\n     ;(map params-&gt;strategy)\n     ;(subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     ;(map params-&gt;strategy)\n     ;(subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     (map (partial apply max-key val))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     (map (partial apply max-key val))\n     (map key)\n     frequencies\n     pprint)&quot; &quot;(defn play-series\n  \&quot;Returns result of n games between input strategies as a map\n   'name/number of wins'. In case of tie both strategies wins\&quot;\n  [n &amp; strategies]\n  (-&gt;&gt; #(count-points (apply play strategies))\n       repeatedly\n       (take n)\n       (map (partial apply max-key val))\n       (map key)\n       frequencies))&quot; &quot;(defn play-series\n  \&quot;Returns result of n games between input strategies as a map\n   'name/number of wins'. In case of tie both strategies wins\&quot;\n  [n &amp; strategies]\n  (-&gt;&gt; #(count-points (apply play strategies))\n       repeatedly\n       (take n)))\n&quot; &quot;(play-series 10 \n             [\&quot;1\&quot; optimized-big-money]\n              \&quot;2\&quot; optimized-big-money)&quot; &quot;()&quot; &quot;(play-series 10 \n             [\&quot;1\&quot; province-gold-duchy-silver]\n             [\&quot;2\&quot; province-gold-silver])&quot; &quot;(defn count-series-wins\n  [result]\n  (-&gt;&gt; result\n    (map (partial apply max-key val))\n    (map key)\n    frequencies))&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     count-series-wins \n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     count-series-wins\n     sort-by second\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     ;(take 3)\n     ;results-&gt;params\n     ;(cons [5 7 2 1])\n     ;(map params-&gt;strategy)\n     ;(subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     ;count-series-wins\n     ;(sort-by second &gt;)\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     ;(map params-&gt;strategy)\n     ;(subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     ;count-series-wins\n     ;(sort-by second &gt;)\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     ;count-series-wins\n     ;(sort-by second &gt;)\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     count-series-wins\n     ;(sort-by second &gt;)\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     count-series-wins\n     (sort-by second &gt;)\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (cons [5 7 2 1])\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     count-series-wins\n     (sort-by second &gt;)\n     first\n     pprint)&quot; &quot;(defn count-series-wins\n  [result]\n  (-&gt;&gt; result\n     (map (partial apply max-key val))\n     (map key)\n     frequencies\n     (sort-by second &gt;)))&quot; &quot;  (-&gt;&gt; (neighbour-results neighbour-series [5 4 3 2])\n       (take 3)\n       results-&gt;params\n       (cons [5 4 3 2])\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first)&quot; &quot;  (-&gt;&gt; (neighbour-results 10 [5 4 3 2])\n       (take 3)\n       results-&gt;params\n       (cons [5 4 3 2])\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series 10))\n       ;count-series-wins\n       first)&quot; &quot;(defn play-series\n  \&quot;Returns result of n games between input strategies as a map\n   'name/number of wins'. In case of tie both strategies wins\&quot;\n  [n &amp; strategies]\n  (-&gt;&gt; #(count-points (apply play strategies))\n       repeatedly\n       (take n)\n       count-series-wins))&quot; &quot;( count-series-wins (play-series 10 \n             [\&quot;1\&quot; province-gold-duchy-silver]\n             [\&quot;2\&quot; province-gold-silver]))&quot; &quot;(defn count-series-wins\n  [result]\n  (-&gt;&gt; result\n     (map (partial apply max-key val))\n     (map key)\n     frequencies))&quot; &quot;  (-&gt;&gt; (neighbour-results 10 [5 4 3 2])\n       (take 3)\n       ;results-&gt;params\n       ;(cons [5 4 3 2])\n       ;(map params-&gt;strategy)\n       ;(subsets 2)\n       ;(map (partial apply play-balanced-series 10))\n       ;count-series-wins\n       first)&quot; &quot;  (-&gt;&gt; (neighbour-results 10 [5 4 3 2])\n       (take 3)\n       results-&gt;params\n       (cons [5 4 3 2])\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series 10))\n       count-series-wins\n       first)&quot; &quot;  (-&gt;&gt; (neighbour-results 10 [5 4 3 2])\n       (take 3)\n       ;results-&gt;params\n       ;(cons [5 4 3 2])\n       ;(map params-&gt;strategy)\n       ;(subsets 2)\n       ;(map (partial apply play-balanced-series 10))\n       ;count-series-wins\n       ;first\n       )&quot; &quot;  (-&gt;&gt; (neighbour-results 10 [5 4 3 2])\n       (take 3)\n       results-&gt;params\n       (cons [5 4 3 2])\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series 10))\n       ;count-series-wins\n       ;first\n       )&quot; &quot;  (-&gt;&gt; (neighbour-results 10 [5 4 3 2])\n       (take 3)\n       results-&gt;params\n       (cons [5 4 3 2])\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series 10))\n       count-series-wins\n       ;first\n       )&quot; &quot;  (-&gt;&gt; (neighbour-results 10 [5 4 3 2])\n       (take 3)\n       results-&gt;params\n       (cons [5 4 3 2])\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series 10))\n       count-series-wins\n       first\n       )&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       results-&gt;params\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       result-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       ;results-&gt;params\n       ))&quot; &quot;(defn results-&gt;params\n  [result]\n  (map (comp vec read-string first) result))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       (map result-&gt;params)\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       ;results-&gt;params\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       map result-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       ;results-&gt;params\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       ;results-&gt;params\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       (comp vec read-string first)\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       ;(comp vec read-string first)\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       first ;(comp vec read-string first)\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       first\n       first ;(comp vec read-string first)\n       read-string\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       ;first\n       ;first ;(comp vec read-string first)\n       ;read-string\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       (sort-by val &gt;)\n       (comp read-string key first)\n       ;first\n       ;first ;(comp vec read-string first)\n       ;read-string\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       (sort-by val &gt;)\n       (comp key first)\n       ;first\n       ;first ;(comp vec read-string first)\n       ;read-string\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       (sort-by val &gt;)\n       (partial comp key first)\n       ;first\n       ;first ;(comp vec read-string first)\n       ;read-string\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       (sort-by val &gt;)\n       first\n       first ;(comp vec read-string first)\n       read-string\n       ))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       (sort-by val &gt;)\n       ;first\n       ;first ;(comp vec read-string first)\n       ;read-string\n       ))&quot; &quot;(comp first first\n      '([\&quot;[6 5 3 3]\&quot; 2] [\&quot;[5 4 3 2]\&quot; 2] [\&quot;[4 4 4 3]\&quot; 1] [\&quot;[5 5 4 1]\&quot; 1]))&quot; &quot;(comp first \n      '([\&quot;[6 5 3 3]\&quot; 2] [\&quot;[5 4 3 2]\&quot; 2] [\&quot;[4 4 4 3]\&quot; 1] [\&quot;[5 5 4 1]\&quot; 1]))&quot; &quot;((comp first \n      '([\&quot;[6 5 3 3]\&quot; 2] [\&quot;[5 4 3 2]\&quot; 2] [\&quot;[4 4 4 3]\&quot; 1] [\&quot;[5 5 4 1]\&quot; 1])))&quot; &quot;((comp first) \n      '([\&quot;[6 5 3 3]\&quot; 2] [\&quot;[5 4 3 2]\&quot; 2] [\&quot;[4 4 4 3]\&quot; 1] [\&quot;[5 5 4 1]\&quot; 1]))&quot; &quot;((comp first first) \n      '([\&quot;[6 5 3 3]\&quot; 2] [\&quot;[5 4 3 2]\&quot; 2] [\&quot;[4 4 4 3]\&quot; 1] [\&quot;[5 5 4 1]\&quot; 1]))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       (sort-by val &gt;)\n       ((comp read-string first first))\n       ;first\n       ;first ;(comp vec read-string first)\n       ;read-string\n       ))&quot; &quot;((comp read-string first first) \n      '([\&quot;[6 5 3 3]\&quot; 2] [\&quot;[5 4 3 2]\&quot; 2] [\&quot;[4 4 4 3]\&quot; 1] [\&quot;[5 5 4 1]\&quot; 1]))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n       (take tournament-players)\n       results-&gt;params\n       (cons params)\n       (map params-&gt;strategy)\n       (subsets 2)\n       (map (partial apply play-balanced-series tournament-series))\n       count-series-wins\n       (sort-by val &gt;)\n       ((comp read-string key first))\n       ))&quot; &quot;(best-tournament-params 10 10 3 [5 4 3 2])&quot; &quot;(defn optimize-best-neighbour\n  [games-cnt max-steps params]\n  (-&gt;&gt; params\n       (iterate (partial best-neighbour-params games-cnt))\n       (find-duplicate max-steps)\n       first))&quot; &quot;(defn best-tournament-params\n  [neighbour-series tournament-series tournament-players params]\n  (-&gt;&gt; (neighbour-results neighbour-series params)\n     (take tournament-players)\n     results-&gt;params\n     (cons params)\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series tournament-series))\n     count-series-wins\n     (sort-by val &gt;)\n     ((comp read-string key first))))&quot; &quot;(optimize-best-neighbour 10 30 [5 4 3 2])&quot;], :remote []}}</component>
</project>