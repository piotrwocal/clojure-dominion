<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1421871501457">{:repl-history {:ide [], :local [&quot;(str optimized-big-money)&quot; &quot;(defn permutations\n  [[params &amp; params-seq]]\n  (if (nil? params-seq)\n    (map vector params)\n    (for [param params]\n      (apply map (partial cons param) (permutations params-seq)))))&quot; &quot;(permutations [[1 2] [3 4] [5 6]])&quot; &quot;(defn permutations\n  [[params &amp; params-seq]]\n  (if (nil? params-seq)\n    (list (map vector params))\n    (for [param params]\n      (apply map (partial cons param) (permutations params-seq)))))&quot; &quot;(permutations [[1] [4] [5 6]])&quot; &quot;(defn permutations\n  [[params &amp; params-seq]]\n  (if (nil? params-seq)\n    (list (map vector params))\n    (for [param params]\n      (apply map (partial apply cons param) (permutations params-seq)))))\n\n&quot; &quot;(defn permutations\n  [[params &amp; params-seq]]\n  (if (nil? params-seq)\n    (list (map vector params))\n    (for [param params]\n      (map (partial cons param) (permutations params-seq)))))&quot; &quot;(permutations [[1] [3 4] [5 6]])&quot; &quot;(defn permutations\n  [[params &amp; params-seq]]\n  (if (nil? params-seq)\n    (map vector params)\n    (for [param params]\n      (map (partial cons param) (permutations params-seq)))))&quot; &quot;(defn permutations\n  [[params &amp; params-seq]]\n  (if (nil? params-seq)\n    (map vector params) \n    (map concat (permutations params-seq) params)))&quot; &quot;(permutations [[1] [3 4] ])&quot; &quot;(defn permutations\n  [[params &amp; params-seq]]\n  (if (nil? params-seq)\n    (map vector params) \n    (map #(map (permutations params-seq) params))))&quot; &quot;(map (partial cons 5) [[1 2][4 5]])&quot; &quot;(defn permutations\n  [[params &amp; params-seq]]\n  (if (nil? params-seq)\n    (map vector params)\n    (map\n      #(map (partial cons %) (permutations params-seq))\n      params)))&quot; &quot;(permutations [ [1 2] [3 4]])&quot; &quot;(defn permutations\n  [[params &amp; params-seq]]\n  (if (nil? params-seq)\n    (map vector params)\n    (mapcat\n      #(map (partial cons %) (recur params-seq))\n      params)))&quot; &quot;(defn permutations\n  [[params &amp; params-seq]]\n  (if (nil? params-seq)\n    (map vector params)\n    (mapcat\n      #(map cons (permutations params-seq))\n      params)))&quot; &quot;(permutations [ [1] [3 4] [5 6]])&quot; &quot;(defn permutations\n  [[params &amp; params-seq]]\n  (if (nil? params-seq)\n    (map vector params)\n    (mapcat\n      #(map (partial cons %) (permutations params-seq))\n      params)))&quot; &quot;(defn neighbours\n  [params]\n  (-&gt;&gt; params\n    (map #(map (partial + %) (range -1 2)))\n    (map (partial filter #(and (&gt;= % 0) (&lt;= % 9))))))&quot; &quot;(neighbours [5 0 9])&quot; &quot;(permutations (neighbours [5 0 9]))&quot; &quot;(permutations (neighbours [1 2]))&quot; &quot;(neighbours [1 2])&quot; &quot;(neighbours [1 0])&quot; &quot;(permutations (neighbours [1 0]))&quot; &quot;(permutations [])&quot; &quot;(permutations [1])&quot; &quot;(permutations [[1]])&quot; &quot;(permutations [[]])&quot; &quot;(permutations [[1 2]])&quot; &quot;(pprint\n  (for [x (range 10)]\n    (assoc (play-balanced-series 200\n             [\&quot;paramized\&quot; (paramized-big-money* 5 7 2 1)]\n             [\&quot;big-money\&quot; optimized-big-money]) :x x)))&quot; &quot;(pprint\n  (play-balanced-series 200\n    [\&quot;paramized\&quot; (paramized-big-money* 5 7 2 1)]\n    [\&quot;big-money\&quot; optimized-big-money]))&quot; &quot;(permutations (neighbours [5 7 2 1]))&quot; &quot;(count (permutations (neighbours [5 7 2 1])))&quot; &quot;(let [candidate-params (permutations (neighbours [5 7 2 1]))]\n     candidate-params)&quot; &quot;(let [candidate-params (permutations (neighbours [5 7 2 1]))]\n  (set candidate-params))&quot; &quot;(let [candidate-params (permutations (neighbours [5 7 2 1]))]\n  (count (set candidate-params)))&quot; &quot;(let [candidate-params (permutations (neighbours [5 7 2 1]))]\n  candidate-params)&quot; &quot;(let [best-params [5 7 2 1]\n      candidate-params (permutations (neighbours best-params))]\n  candidate-params)&quot; &quot;(str [1 2 3 4])&quot; &quot;(doc str)&quot; &quot;(let [best-params [5 7 2 1]\n      candidates-params (permutations (neighbours best-params))\n      best-strategy (paramized-big-money* best-params)\n      candidates-strategies (map paramized-big-money* candidates-params)]\n  candidates-strategies)&quot; &quot;(let [best-params [5 7 2 1]\n      candidates-params (permutations (neighbours best-params))\n      best-strategy (apply paramized-big-money* best-params)\n      candidates-strategies (apply map paramized-big-money* candidates-params)]\n  candidates-strategies)&quot; &quot;(let [best-params [5 7 2 1]\n      candidates-params (permutations (neighbours best-params))\n      best-strategy (apply paramized-big-money* best-params)\n      candidates-strategies (map (partial apply paramized-big-money*) candidates-params)]\n  candidates-strategies)&quot; &quot;(let [best-params [5 7 2 1]\n      candidates-params (permutations (neighbours best-params))\n      best-strategy (apply paramized-big-money* best-params)\n      candidates-strategies (map (partial apply paramized-big-money*) candidates-params)]\n  (count candidates-strategies))&quot; &quot;(defn paramized-big-money*\n  ([[gold-min-p duchy-max-p silver-min-p estate-max-p]]\n    (paramized-big-money* gold-min-p duchy-max-p silver-min-p estate-max-p))\n  ([gold-min-p duchy-max-p silver-min-p estate-max-p]\n  (fn [board hand]\n    (let [value (count-of :value hand)\n          provinces (:province board 0)]\n      (cond\n        (can-buy? board :province value) {:province 1}\n        (and (can-buy? board :gold value) (&gt;= provinces gold-min-p)) {:gold 1}\n        (and (can-buy? board :duchy value) (&lt;= provinces duchy-max-p)) {:duchy 1}\n        (and (can-buy? board :silver value) (&gt;= provinces silver-min-p)) {:silver 1}\n        (and (can-buy? board :estate value) (&lt;= provinces estate-max-p)) {:estate 1}\n        :else {})))))&quot; &quot;(let [best [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (paramized-big-money* best-params)\n      candidates-strategies (map paramized-big-money* candidates)]\n  (count candidates-strategies))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (paramized-big-money* best-params)\n      candidates-strategies (map paramized-big-money* candidates)]\n  (count candidates-strategies))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy [(str best-params) (paramized-big-money* best-params)]\n      candidates-strategies (map #([(str %) (paramized-big-money* %)]) candidates)]\n  (count candidates-strategies))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy [(str best-params) (paramized-big-money* best-params)]\n      candidates-strategies (map #(vector (str %) (paramized-big-money* %)) candidates)]\n  (count candidates-strategies))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy [(str best-params) (paramized-big-money* best-params)]\n      candidates-strategies (map #(vector (str %) (paramized-big-money* %)) candidates)]\n  (pprint candidates-strategies))&quot; &quot;(defn params-&gt;strategy \n  [params]\n  [(str params) (paramized-big-money* best-params)])\n\n&quot; &quot;(defn params-&gt;strategy \n  [params]\n  [(str params) (paramized-big-money* params)])\n\n&quot; &quot;(defn paramized-big-money*\n  ;([[gold-min-p duchy-max-p silver-min-p estate-max-p]]\n  ;  (paramized-big-money* gold-min-p duchy-max-p silver-min-p estate-max-p))\n  [gold-min-p duchy-max-p silver-min-p estate-max-p]\n    (fn [board hand]\n      (let [value (count-of :value hand)\n            provinces (:province board 0)]\n        (cond\n          (can-buy? board :province value) {:province 1}\n          (and (can-buy? board :gold value) (&gt;= provinces gold-min-p)) {:gold 1}\n          (and (can-buy? board :duchy value) (&lt;= provinces duchy-max-p)) {:duchy 1}\n          (and (can-buy? board :silver value) (&gt;= provinces silver-min-p)) {:silver 1}\n          (and (can-buy? board :estate value) (&lt;= provinces estate-max-p)) {:estate 1}\n          :else {}))))&quot; &quot;(defn params-&gt;strategy \n  [params]\n  [(str params) (apply paramized-big-money* params)])\n\n&quot; &quot;(params-&gt;strategy [ 1 2 3 ])&quot; &quot;(params-&gt;strategy [ 1 2 3 4 5])&quot; &quot;(params-&gt;strategy [ 1 2 3 4])&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (pprint candidates-strategies))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (count candidates-strategies))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (pprint candidates-strategies))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (map (partial play-balanced-series 1 best-strategy) candidates-strategies))&quot; &quot;()&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (pprint (map (partial play-balanced-series 1 best-strategy) candidates-strategies)))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (pprint (map (partial play-balanced-series 10 best-strategy) candidates-strategies)))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (pprint\n      (map (partial play-balanced-series 1 best-strategy) \n        candidates-strategies)))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; (map (partial play-balanced-series 1 best-strategy) \n        candidates-strategies)\n    pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n    (map (partial play-balanced-series 1 best-strategy))\n    pprint))&quot; &quot;(sort-by val \n  '({\&quot;(6 8 2 0)\&quot; 1, \&quot;[5 7 2 1]\&quot; 1}\n     {\&quot;[5 7 2 1]\&quot; 2}\n     {\&quot;(6 8 2 2)\&quot; 1, \&quot;[5 7 2 1]\&quot; 1}))&quot; &quot;(apply sort (partial max-key val)\n  '({\&quot;(6 8 2 0)\&quot; 1, \&quot;[5 7 2 1]\&quot; 1}\n     {\&quot;[5 7 2 1]\&quot; 2}\n     {\&quot;(6 8 2 2)\&quot; 1, \&quot;[5 7 2 1]\&quot; 1}))&quot; &quot;(sort (partial max-key val)\n  '({\&quot;(6 8 2 0)\&quot; 1, \&quot;[5 7 2 1]\&quot; 1}\n     {\&quot;[5 7 2 1]\&quot; 2}\n     {\&quot;(6 8 2 2)\&quot; 1, \&quot;[5 7 2 1]\&quot; 1}))&quot; &quot;((partial max-key val)\n  '({\&quot;(6 8 2 0)\&quot; 1, \&quot;[5 7 2 1]\&quot; 1}\n     {\&quot;[5 7 2 1]\&quot; 2}\n     {\&quot;(6 8 2 2)\&quot; 1, \&quot;[5 7 2 1]\&quot; 1}))&quot; &quot;(pprint ((partial max-key val)\n  '({\&quot;(6 8 2 0)\&quot; 1, \&quot;[5 7 2 1]\&quot; 1}\n     {\&quot;[5 7 2 1]\&quot; 2}\n     {\&quot;(6 8 2 2)\&quot; 1, \&quot;[5 7 2 1]\&quot; 1})))&quot; &quot;(max-key val\n  '({\&quot;(6 8 2 0)\&quot; 1, \&quot;[5 7 2 1]\&quot; 1}\n     {\&quot;[5 7 2 1]\&quot; 2}\n     {\&quot;(6 8 2 2)\&quot; 1, \&quot;[5 7 2 1]\&quot; 1}))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (pprint\n    (frequencies \n      (map (partial play-balanced-series 10 best-strategy) \n        candidates-strategies))))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n    (map (partial play-balanced-series 1 best-strategy))\n    (map (partial apply max-key val))\n    pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n    (map (partial play-balanced-series 1 best-strategy))\n    (map (partial apply max-key val))\n    \n    pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n    (map (partial play-balanced-series 1 best-strategy))\n    (map (partial apply max-key val))\n    (remove #(= best-params (first %))) \n      pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n    (map (partial play-balanced-series 1 best-strategy))\n    (map (partial apply max-key val))\n    (remove #(= best-params (first %))) \n      count))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n    (map (partial play-balanced-series 1 best-strategy))\n    (map (partial apply max-key val))\n    (remove #(= (str best-params) (first %))) \n      count))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n    (map (partial play-balanced-series 1 best-strategy))\n    (map (partial apply max-key val))\n    (remove #(= (str best-params) (first %))) \n      pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n    (map (partial play-balanced-series 1 best-strategy))\n    ;(map (partial apply max-key val))\n    ;(remove #(= (str best-params) (first %)))\n    ;(sort-by second &gt;)\n      pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; [[1 1 1 1]]\n    (map (partial play-balanced-series 1 best-strategy))\n    (map (partial apply max-key val))\n    (remove #(= (str best-params) (first %)))\n    (sort-by second &gt;)\n      pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; [(params-&gt;strategy 1 1 1 1)]\n    (map (partial play-balanced-series 1 best-strategy))\n    (map (partial apply max-key val))\n    (remove #(= (str best-params) (first %)))\n    (sort-by second &gt;)\n      pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; [(params-&gt;strategy [1 1 1 1])]\n    (map (partial play-balanced-series 1 best-strategy))\n    ;(map (partial apply max-key val))\n    ;(remove #(= (str best-params) (first %)))\n    ;(sort-by second &gt;)\n      pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; [(params-&gt;strategy [1 1 1 1])]\n    (map (partial play-balanced-series 1 best-strategy))\n    (map (partial apply max-key val))\n    ;(remove #(= (str best-params) (first %)))\n    ;(sort-by second &gt;)\n      pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; [(params-&gt;strategy [1 1 1 1])]\n    (map (partial play-balanced-series 1 best-strategy))\n    (map (partial apply max-key val))\n    (remove #(= (str best-params) (first %)))\n    ;(sort-by second &gt;)\n      pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; [(params-&gt;strategy [1 1 1 1])]\n    (map (partial play-balanced-series 1 best-strategy))\n    (map (partial apply max-key val))\n    (remove #(= (str best-params) (first %)))\n    (sort-by second &gt;)\n      pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; [(params-&gt;strategy [1 1 1 1])]\n    (map (partial play-balanced-series 10 best-strategy))\n    ;(map (partial apply max-key val))\n    ;(remove #(= (str best-params) (first %)))\n    ;(sort-by second &gt;)\n      pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; [(params-&gt;strategy [0 0 0 0])]\n    (map (partial play-balanced-series 10 best-strategy))\n    ;(map (partial apply max-key val))\n    ;(remove #(= (str best-params) (first %)))\n    ;(sort-by second &gt;)\n      pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; [(params-&gt;strategy [9 9 9 0])]\n    (map (partial play-balanced-series 10 best-strategy))\n    ;(map (partial apply max-key val))\n    ;(remove #(= (str best-params) (first %)))\n    ;(sort-by second &gt;)\n      pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n    (map (partial play-balanced-series 1 best-strategy))\n    (map (partial apply max-key val))\n    (remove #(= (str best-params) (first %)))\n    (sort-by second &gt;)\n      pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n    (map (partial play-balanced-series 10 best-strategy))\n    ;(map (partial apply max-key val))\n    ;(remove #(= (str best-params) (first %)))\n    ;(sort-by second &gt;)\n      pprint))&quot; &quot;(max-key val { :1 1 :2 1})&quot; &quot;(max-key val { :1 1 :2 2})&quot; &quot;(apply max-key val { :1 1 :2 2})&quot; &quot;(doc max-key)&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n    (map (partial play-balanced-series 10 best-strategy))\n    (map (partial apply max-key val))\n    (remove #(= (str best-params) (first %)))\n    (sort-by second &gt;)\n      pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n    (map (partial play-balanced-series 10 best-strategy))\n    (map (partial apply max-key val))\n    (remove #(= (str best-params) (first %)))\n    (sort-by second &gt;)\n      count))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n    (map (partial play-balanced-series 10 best-strategy))\n    (map (partial apply max-key val))\n    (remove #(= (str best-params) (first %)))\n    (sort-by second &gt;)\n    pprint))&quot;], :remote []}}</component>
</project>