<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1421876068237">{:repl-history {:ide [], :local [&quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n    (map (partial play-balanced-series 10 best-strategy))\n    (map (partial apply max-key val))\n    (remove #(= (str best-params) (first %)))\n    (sort-by second &gt;)\n    pprint))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n       (map (partial play-balanced-series 10 best-strategy))\n       (map (partial apply max-key val))\n       (remove #(= (str best-params) (first %)))\n       (sort-by second &gt;)\n       first\n       key))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n       (map (partial play-balanced-series 10 best-strategy))\n       (map (partial apply max-key val))\n       (remove #(= (str best-params) (first %)))\n       (sort-by second &gt;)\n       (-&gt;&gt; first key read-string)))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n       (map (partial play-balanced-series 10 best-strategy))\n       (map (partial apply max-key val))\n       (remove #(= (str best-params) (first %)))\n       (sort-by second &gt;)\n       (-&gt; first key read-string)))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n       (map (partial play-balanced-series 10 best-strategy))\n       (map (partial apply max-key val))\n       (remove #(= (str best-params) (first %)))\n       (sort-by second &gt;)\n       #(-&gt; % first key read-string)))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n       (map (partial play-balanced-series 10 best-strategy))\n       (map (partial apply max-key val))\n       (remove #(= (str best-params) (first %)))\n       (sort-by second &gt;)\n       #(-&gt;&gt; % first key read-string)))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n       (map (partial play-balanced-series 10 best-strategy))\n       (map (partial apply max-key val))\n       (remove #(= (str best-params) (first %)))\n       (sort-by second &gt;)\n       first ))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n       (map (partial play-balanced-series 10 best-strategy))\n       (map (partial apply max-key val))\n       (remove #(= (str best-params) (first %)))\n       (sort-by second &gt;)\n       (partial first key)))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n       (map (partial play-balanced-series 10 best-strategy))\n       (map (partial apply max-key val))\n       (remove #(= (str best-params) (first %)))\n       (sort-by second &gt;)\n       ))&quot; &quot;(defn find-best\n  [n params]\n  (let [best-params params\n        candidates (-&gt; best-params neighbours permutations)\n        best-strategy (params-&gt;strategy best-params)\n        candidates-strategies (map params-&gt;strategy candidates)]\n    (-&gt;&gt; candidates-strategies\n         (map (partial play-balanced-series n best-strategy))\n         (map (partial apply max-key val))\n         (remove #(= (str best-params) (first %)))\n         (sort-by second &gt;)\n         first\n         key\n         read-string)))&quot; &quot;(let [best-params [5 7 2 1]\n      candidates (permutations (neighbours best-params))\n      best-strategy (params-&gt;strategy best-params)\n      candidates-strategies (map params-&gt;strategy candidates)]\n  (-&gt;&gt; candidates-strategies\n       (map (partial play-balanced-series 10 best-strategy))\n       (map (partial apply max-key val))\n       (remove #(= (str best-params) (first %)))\n       (sort-by second &gt;)\n       first\n       key\n       read-string))&quot; &quot;(find-best 10 [5 7 2 1])&quot; &quot;(take 5 (iterate (find-best 10 [5 7 2 1])))&quot; &quot;(take 3 (iterate (partial find-best 10) [5 7 2 1]))&quot; &quot;(defn find-best\n  [n params]\n  (let [best-params params\n        candidates (-&gt; best-params neighbours permutations)\n        best-strategy (params-&gt;strategy best-params)\n        candidates-strategies (map params-&gt;strategy candidates)]\n    (-&gt;&gt; candidates-strategies\n         (map (partial play-balanced-series n best-strategy))\n         (map (partial apply max-key val))\n         (remove #(= (str best-params) (first %)))\n         (sort-by second &gt;)\n         first\n         key\n         read-string\n         vec )))&quot; &quot;(take 2 (iterate (partial find-best 10) [5 7 2 1]))&quot; &quot;(take 5 (iterate (partial find-best 10) [5 7 2 1]))&quot; &quot;(play-balanced-series 10\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [4 6 3 2]))&quot; &quot;(play-balanced-series 100\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [4 6 3 2]))&quot; &quot;(take 10 (iterate (partial find-best 10) [5 7 2 1]))&quot; &quot;(play-balanced-series 100\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [3 6 4 4]))&quot; &quot;(play-balanced-series 10\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [3 6 4 4]))&quot; &quot;(pprint (take 10 (iterate (partial find-best 10) [5 7 2 1])))&quot; &quot;(play-balanced-series 100\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [4 6 3 1]))&quot; &quot;(play-balanced-series 100\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [4 7 1 1]))&quot; &quot;(pprint (take 5 (iterate (partial find-best 100) [5 7 2 1])))&quot; &quot;(pprint (take 5 (iterate (partial find-best 10) [5 7 2 1])))&quot; &quot;(pprint (take 5 (iterate (partial find-best 50) [5 7 2 1])))&quot; &quot;(play-balanced-series 50\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [5 7 2 2]))&quot; &quot;(play-balanced-series 50\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [5 6 2 2]))&quot; &quot;(play-balanced-series 50\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [5 6 3 3]))&quot; &quot;(play-balanced-series 100\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [5 6 3 3]))&quot; &quot;(play-balanced-series 100\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [6 6 4 4]))&quot; &quot;(play-balanced-series 100\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [6 5 4 4]))&quot; &quot;(play-balanced-series 1000\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [6 5 4 4]))&quot; &quot;(defn best-resutls\n  [n params]\n  (let [best-params params\n        candidates (-&gt; best-params neighbours permutations)\n        best-strategy (params-&gt;strategy best-params)\n        candidates-strategies (map params-&gt;strategy candidates)]\n    (-&gt;&gt; candidates-strategies\n         (map (partial play-balanced-series n best-strategy))\n         (map (partial apply max-key val))\n         (remove #(= (str best-params) (first %)))\n         (sort-by second &gt;))))\n&quot; &quot;(defn best-results\n  [n params]\n  (let [best-params params\n        candidates (-&gt; best-params neighbours permutations)\n        best-strategy (params-&gt;strategy best-params)\n        candidates-strategies (map params-&gt;strategy candidates)]\n    (-&gt;&gt; candidates-strategies\n         (map (partial play-balanced-series n best-strategy))\n         (map (partial apply max-key val))\n         (remove #(= (str best-params) (first %)))\n         (sort-by second &gt;))))&quot; &quot;(defn next-best-params\n  [n params]\n  (-&gt;&gt; (best-results n params) first key read-string))&quot; &quot;(defn next-best-params\n  [n params]\n  (-&gt;&gt; (best-results n params) first key read-string vector))&quot; &quot;(defn next-best-params\n  [n params]\n  (-&gt;&gt; (best-results n params) first key read-string vec))&quot; &quot;(play-balanced-series 1000\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [6 6 2 4]))&quot; &quot;(play-balanced-series 100\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [6 6 2 4]))&quot; &quot;(take 10 (iterate (partial next-best-params 20) [5 7 2 1]))&quot; &quot;(next-best-params 10 [5 7 2 1])&quot; &quot;(take 10 (iterate (partial next-best-params 10) [5 7 2 1]))&quot; &quot;(pprint (take 10 (iterate (partial next-best-params 10) [5 7 2 1])))&quot; &quot;(play-balanced-series 100\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [4 6 1 6]))&quot; &quot;(play-balanced-series 100\n    (params-&gt;strategy [5 7 2 1])\n    (params-&gt;strategy [4 7 3 2]))&quot; &quot;(defn subsets [n items]\n  (cond\n    (= n 0) '(())\n    (empty? items) '()\n    :else (concat (map\n                    #(cons (first items) %)\n                    (recur (dec n) (rest items)))\n                  (recur n (rest items)))))&quot; &quot;(subsets 2 [1 2 3])&quot; &quot;(subsets 3 [1 2 3])&quot; &quot;(permutations [1 2 3])&quot; &quot;(permutations [[1 2 3] [3 4 5]])&quot; &quot;(defn subsets [n items]\n  (cond\n    (= n 0) '(())\n    (empty? items) '()\n    :else (concat (map\n                    #(cons (first items) %)\n                    (subsets (dec n) (rest items)))\n                  (subsets n (rest items)))))&quot; &quot;(defn subsets [n items]\n  (cond\n    (= n 0) '(())\n    (empty? items) '()\n    :else (concat (map\n                    (partial cons (first items))\n                    (subsets (dec n) (rest items)))\n                  (subsets n (rest items)))))&quot; &quot;(subsets 2 [1 2 3 4])&quot; &quot;(subsets 3 [1 2 3 4])&quot; &quot;(best-results 10 [5 7 2 1])&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3))&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     (subsets 2))&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 5)\n     (subsets 2)\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     ;(take 3)\n     ;(subsets 2)\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (map first)\n     ;(take 3)\n     ;(subsets 2)\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     #(-&gt;&gt; % first key read-string vec)\n     ;(take 3)\n     ;(subsets 2)\n     pprint)&quot; &quot;((comp vec read-string key first)\n  ([\&quot;(6 6 2 2)\&quot; 14]\n    [\&quot;(6 7 3 2)\&quot; 14]))&quot; &quot;((comp first key read-string vec)\n  ([\&quot;(6 6 2 2)\&quot; 14]\n    [\&quot;(6 7 3 2)\&quot; 14]))&quot; &quot;(map (comp key read-string vec)\n  ([\&quot;(6 6 2 2)\&quot; 14]\n    [\&quot;(6 7 3 2)\&quot; 14]))&quot; &quot;(map (comp vec read-string first)\n  ([\&quot;(6 6 2 2)\&quot; 14]\n    [\&quot;(6 7 3 2)\&quot; 14]))&quot; &quot;(map (comp vec read-string first)\n  '([\&quot;(6 6 2 2)\&quot; 14]\n    [\&quot;(6 7 3 2)\&quot; 14]))&quot; &quot;(defn results-&gt;params\n  [results]\n  (map (comp vec read-string first) results))\n&quot; &quot;(results-&gt;params\n  '([\&quot;(6 6 2 2)\&quot; 14]\n     [\&quot;(6 7 3 2)\&quot; 14]))&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     (subsets 2)\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     (subsets 2)\n     results-&gt;params\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (subsets 2)\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     params-&gt;strategy\n     (subsets 2)\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     first\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     first\n     (play-balanced-series 10)\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     first\n     (apply map play-balanced-series 10)\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     first\n     map (partial apply play-balanced-series 10)\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     first\n     (map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     first\n     (apply play-balanced-series 10)\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     (apply map play-balanced-series 10)\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map #(apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (best-results 10 [5 7 2 1])\n     ;(take 3)\n     ;results-&gt;params\n     ;(map params-&gt;strategy)\n     ;(subsets 2)\n     ;(map (partial play-balanced-series 10))\n     pprint)&quot; &quot;(defn next-best-params\n  [n params]\n  (-&gt;&gt; (neighbour-results n params) first key read-string vec))&quot; &quot;(defn neighbour-results\n  [n params]\n  (let [best-params params\n        candidates (-&gt; best-params neighbours permutations)\n        best-strategy (params-&gt;strategy best-params)\n        candidates-strategies (map params-&gt;strategy candidates)]\n    (-&gt;&gt; candidates-strategies\n         (map (partial play-balanced-series n best-strategy))\n         (map (partial apply max-key val))\n         (remove #(= (str best-params) (first %)))\n         (sort-by second &gt;))))&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     (take 3)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 10))\n     (map (partial apply max-key val))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 10 [5 7 2 1])\n     ;(take 3)\n     ;results-&gt;params\n     ;(map params-&gt;strategy)\n     ;(subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 2 [5 7 2 1])\n     (take 10)\n     ;results-&gt;params\n     ;(map params-&gt;strategy)\n     ;(subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 2 [5 7 2 1])\n     (take 100)\n     ;results-&gt;params\n     ;(map params-&gt;strategy)\n     ;(subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 2 [5 7 2 1])\n     (take 2)\n     ;results-&gt;params\n     ;(map params-&gt;strategy)\n     ;(subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(play-balanced-series )&quot; &quot;(-&gt;&gt; (neighbour-results 2 [5 7 2 1])\n     (take 2)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     ;(map (partial apply play-balanced-series 10))\n     pprint)&quot; &quot;(-&gt;&gt; (neighbour-results 2 [5 7 2 1])\n     (take 2)\n     results-&gt;params\n     (map params-&gt;strategy)\n     (subsets 2)\n     (map (partial apply play-balanced-series 2))\n     pprint)&quot; &quot;(subsets 1 (range 5))&quot; &quot;(subsets 2 (range 5))&quot; &quot;(subsets 5 (range 5))&quot;], :remote []}}</component>
</project>